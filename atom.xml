<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter(杨楠) 博客]]></title>
  <link href="http://lanmo.github.com/atom.xml" rel="self"/>
  <link href="http://lanmo.github.com/"/>
  <updated>2014-11-03T21:46:00+08:00</updated>
  <id>http://lanmo.github.com/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git相关]]></title>
    <link href="http://lanmo.github.com/blog/2014/11/03/gitxiang-guan/"/>
    <updated>2014-11-03T20:08:45+08:00</updated>
    <id>http://lanmo.github.com/blog/2014/11/03/gitxiang-guan</id>
    <content type="html"><![CDATA[<p>  　　git版本管理，平时用的比较多，zsh提供了强大的插件，告别了小乌龟时代，都是使用命令进行操作，一般都是常用命令，偶尔也会存在使用不当影响开发，这个地方简单记录一下，出现了问题也可以到这来查查，后续遇到问题在往这里添加吧，写这篇文章的目的也是为了以后少出问题，尽量不出问题，即使出了问题也能很快解决，不要影响开发效率。<br/>
  　　<code>git cherry-pick &lt;commit id&gt;</code><br/>
   　　用于把另一个本地分支的commit修改应用到当前分支。  <br/>
   　　在本地 master 分支上做了一个commit ( 38361a68138140827b31b72f8bbfd88b3705d77a ) ， 如何把它放到 本地 develop 分支上？ <br/>
   　　$git checkout develop<br/>
   　　$git cherry-pick 38361a68138140827b31b72f8bbfd88b3705d77a<br/>
   　　<br/>
   <code>git stash</code><br/>
   1.使用<code>git stash</code>保存当前的工作现场，那么就可以切换到其他分支进行工作，或者在当前分支上完成其他紧急的工作，比如修订一个bug测试提交。<br/>
2.如果一个使用了一个<code>git stash</code>，切换到一个分支，且在该分支上的工作未完成也需要保存它的工作现场。再使用<code>git stash</code>。那么stash 队列中就有了两个工作现场。<br/>
3.可以使用<code>git stash list</code>,查看stash队列。<br/>
4.如果在一个分支上想要恢复某一个工作现场怎么办：先用<code>git stash list</code>查看stash队列。确定要恢复哪个工作现场到当前分支。然后用<code>git stash pop stash@{num}</code>。num 就是你要恢复的工作现场的编号。<br/>
5.如果想要清空stash队列则使用<code>git stash clear</code>。<br/>
6.同时注意使用<code>git stash pop</code>命令是恢复stash队列中的stash@{0}即最上层的那个工作现场。而且使用pop命令恢复的工作现场，其对应的stash 在队列中删除。使用<code>git stash apply stash@{num}</code>方法除了不在stash队列删除外其他和<code>git stash pop</code> 完全一样。  　　</p>

<p>  <strong>Git如何进行分支管理？</strong><br/>
     1、创建分支<br/>
     创建分支很简单：<code>git branch &lt;分支名&gt;</code><br/>
     2、切换分支<br/>
     <code>git checkout &lt;分支名&gt;</code><br/>
     该语句和上一个语句可以和起来用一个语句表示：git checkout -b &lt;分支名><br/>
     3、分支合并<br/>
     比如，如果要将开发中的分支（develop），合并到稳定分支（master），<br/>
     首先切换的master分支：<code>git checkout master</code>。<br/>
     然后执行合并操作：<code>git merge develop</code>。<br/>
     如果有冲突，会提示你，调用<code>git status</code>查看冲突文件。<br/>
     解决冲突，然后调用<code>git add</code>或<code>git rm</code>将解决后的文件暂存。<br/>
     所有冲突解决后，<code>git commit</code> 提交更改。<br/>
     4、分支衍合<br/>
     分支衍合和分支合并的差别在于，分支衍合不会保留合并的日志，不留痕迹，而 分支合并则会保留合并的日志。<br/>
     要将开发中的分支（develop），衍合到稳定分支（master）。<br/>
     首先切换的master分支：<code>git checkout master</code>。<br/>
     然后执行衍和操作：<code>git rebase develop</code>。<br/>
     如果有冲突，会提示你，调用<code>git status</code>查看冲突文件。<br/>
     解决冲突，然后调用<code>git add</code>或<code>git rm</code>将解决后的文件暂存。<br/>
     所有冲突解决后，<code>git rebase --continue</code> 提交更改。<br/>
     5、删除分支<br/>
     执行<code>git branch -d &lt;分支名&gt;</code>
     如果该分支没有合并到主分支会报错，可以用以下命令强制删除<code>git branch -D &lt;分支名&gt; </code><br/>
     6、查看所有分支<br/>
     执行<code>git branch -a</code></p>

<p>   <strong>git常用命令，在这里做个记录，没有什么实际意义</strong><br/>
   1、全局配置<br/>
   <code>git config -global user.name "yangnan"</code><br/>
   <code>git config -global user.email "xjxyyn@126.com"</code><br/>
   2、创建项目<br/>
   <code>mkdir MyProject</code> <br/>
   <code>git init</code>  初始化<br/>
   <code>git add .</code> 添加文件<br/>
   <code>git commit -m "初始化"</code> 提交到本地仓库<br/>
   <code>git remote add origin git@github.com:lanmo/WebSocketDemo.git</code>  添加远程仓库<br/>
   <code>git push origin master</code> 提交到远程仓库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下常用]]></title>
    <link href="http://lanmo.github.com/blog/2014/10/24/linuxxia-chang-yong/"/>
    <updated>2014-10-24T21:07:26+08:00</updated>
    <id>http://lanmo.github.com/blog/2014/10/24/linuxxia-chang-yong</id>
    <content type="html"><![CDATA[<h4>1、VIM插件、tmux安装及使用请参考地址</h4>

<pre><code>     [wiki地址](https://github.com/lanmo/config/wiki)
</code></pre>

<h4>2、Ack-grep 快速查找字符</h4>

<pre><code>    安装：  
      1、ubuntu下安装`sudo apt-get install ack-grep`  
      2、mac下安装`sudo brew install ack`  
    使用：  
      1、进入vim模式输入 :Ack 搜索字符  
      2、在命令行下面是 ack-grep 搜索字符
</code></pre>

<h5>3、mac、ubuntu、centos安装zsh</h5>

<pre><code>       mac:  brew install zsh
    ubuntu: sudo apt-get install zsh
    centos: sudo yum install zsh
    下载ohmyzsh：
        git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
        cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
        将zsh设置为默认的Shell：
        chsh -s /bin/zsh
        重启终端或者输入source .zshrc即可使用
</code></pre>

<h4>4、ssh相关</h4>

<pre><code>    1、公钥拷贝到某一台主机上`ssh-copy-id user@ip`
    2、sockets代理和隧道转发技术`ssh -f -N -g -D 8898 user@host`
    3、配合上面语句使用保持心跳，`/etc/ssh/ssh_config`，这个文件加这两行:
        TCPKeepAlive yes  
        ServerAliveInterval 60
</code></pre>

<h4>5、AWK使用，这个命令平时很少使用，想到什么就写什么吧</h4>

<pre><code>    1、获取进程PID: 
        bash: `ps -ef | grep [n]ginx | awk -F " " '{print $2}'`
         zsh: `ps -ef | grep '[n]ginx' | awk -F " " '{print $2}'`
</code></pre>
]]></content>
  </entry>
  
</feed>
