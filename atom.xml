<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter(杨楠) 博客]]></title>
  <link href="http://lanmo.github.com/atom.xml" rel="self"/>
  <link href="http://lanmo.github.com/"/>
  <updated>2015-04-02T16:59:22+08:00</updated>
  <id>http://lanmo.github.com/</id>
  <author>
    <name><![CDATA[Peter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[链表操作]]></title>
    <link href="http://lanmo.github.com/blog/2015/04/02/lian-biao-cao-zuo/"/>
    <updated>2015-04-02T10:48:06+08:00</updated>
    <id>http://lanmo.github.com/blog/2015/04/02/lian-biao-cao-zuo</id>
    <content type="html"><![CDATA[<p>  链表本身很灵活，很考察编程功底，所以我将复习过程中比较好的链表问题整理了一下。本文用到的节点结构如下：</p>

<pre><code>public class Node {
   public Node next;  
   public int value;
}
</code></pre>

<h2>1.在O(1)时间删除链表节点  </h2>

<p><strong>题目描述：</strong>从无头单链表中删除节点，在O(1)时间删除该节点.</p>

<p><strong>分析：</strong>用下一个节点数据覆盖要删除的节点，然后删除下一个节点，删除的节点不能是尾节点.</p>

<p><strong>代码如下：</strong>　　</p>

<pre><code>  public void deleteRandomNode(Node cur) {
    if(cur == null)
        return;
    Node pNext = cur.next;
    if(pNext != null) {//其实这步判断是多余的，这个方法能用的前提就是删除的节点不能是尾节点
        cur.value = pNext.value;
        cur.next = pNext.next;
    }
　　
</code></pre>

<h2>２.单链表的转置  </h2>

<p><strong>题目描述：</strong>输入一个单向链表，输出逆序反转后的链表</p>

<p><strong>分析：</strong>用两个临时指针 n,newHead 在链表上循环一遍即可.</p>

<p><strong>代码如下：</strong></p>

<pre><code>public Node reverse(Node head) {
    if(head == null)
        return;
    Node n = null, newHead = null;
    while(head != null) {
        n = newHead;
        newHead = head;
        head = head.next;
        newHead.next = n;
    } 
    return newHead;
}　　
</code></pre>

<h2>3.求链表的中间节点  </h2>

<p><strong>题目描述：</strong>求链表的中间节点，如果链表的长度为偶数，返回中间两个节点的任意一个，若为奇数，则返回中间节点。</p>

<p><strong>分析：</strong>用两个指针从链表头节点开始，一个指针每次向后移动两步，一个指针每次移动一步，直到快指针移到到尾节点，那么慢指针正好位于链表中间位置。</p>

<p><strong>代码如下：</strong></p>

<pre><code>public Node searchMiddle(Node head) {
    if(head == null || head.next == null)
        return head;
    Node p1, p2;
    p1 = p2 = head;
    while(p2.next != null &amp;&amp; p2.next.next != null) {
        p1 = p1.next;
        p2 = p2.next.next;
    }
    return p1;
}  
</code></pre>

<h2>4.求链表倒数第k个节点  </h2>

<p><strong>题目描述：</strong>输入一个单向链表，输出该链表中倒数第k个节点，链表的倒数第0个节点为链表的尾指针。</p>

<p><strong>分析：</strong>设置两个指针 p1、p2，首先 p1 和 p2 都指向 head，然后 p2 向前走 k 步，这样 p1 和 p2 之间就间隔 k 个节点，最后 p1 和 p2 同时向前移动，直至 p2 走到链表末尾,p1就是所求的节点。</p>

<p><strong>代码如下：</strong></p>

<pre><code>public Node getKNode(Node head,int k) {
    if(k &lt; 0)
        return null;
    Node p1 = head, p2 = head;
    while(k-- &gt; 0 &amp;&amp; p2 != null) {
        p2 = p2.next;
    }
    //大于链表的长度
    if(k &gt; 0) 
        return null;
    while(p2 != null) {
        p1 = p1.next;
        p2 = p2.next;
    }
    return p1;
}  
</code></pre>

<h2>5.判断单链表是否存在环  </h2>

<p><strong>题目描述：</strong>输入一个单向链表，判断链表是否有环。</p>

<p><strong>分析：</strong>通过两个指针，分别从链表的头节点出发，一个每次向后移动一步，另一个移动两步，两个指针移动速度不一样，如果存在环，那么两个指针一定会在环里相遇。</p>

<p><strong>代码如下：</strong></p>

<pre><code>public boolean hasCircle(Node head) {
    if(head == null)
        return false;
    Node p1 = head,p2 = head;
    while(p2 != null &amp;&amp; p2.next != null) {
        p1 = p1.next;
        p2 = p2.next.next;
        if(p1 == p2)
            return true;
    }
    return false;
}  
</code></pre>

<h2>6.找到环的入口点  </h2>

<p><strong>题目描述：</strong>输入一个单向链表，判断链表是否有环。如果链表存在环，如何找到环的入口点。</p>

<p><strong>分析：</strong>由上题可知，按照 p2 每次两步，p1 每次一步的方式走，发现 p2 和 p1 重合，确定了单向链表有环路了。接下来，让p2回到链表的头部，重新走，每次步长不是走2了，而是走1，那么当 p1 和 p2 再次相遇的时候，就是环路的入口了。</p>

<p><strong>为什么？</strong><br/>
假定起点到环入口点的距离为 a，p1 和 p2 的相交点M与环入口点的距离为b，环路的周长为L，当 p1 和 p2 第一次相遇的时候，假定 p1 走了 n 步。那么有：<br/>
　　p1走的路径： <code>a+b ＝ n；</code><br/>
　　p2走的路径： <code>a+b+k*L = 2*n；</code> p2 比 p1 多走了k圈环路，总路程是p1的2倍<br/>
　　根据上述公式可以得到 <code>k*L=a+b=n</code>显然，如果从相遇点M开始，p1 再走 n 步的话，还可以再回到相遇点，同时p2从头开始走的话，经过n步，也会达到相遇点M。<br/>
　　显然在这个步骤当中 p1 和 p2 只有前 a 步走的路径不同，所以当 p1 和 p2 再次重合的时候，必然是在链表的环路入口点上。</p>

<p><strong>代码如下：</strong></p>

<pre><code>public Node findLoopPort(Node head) {
    if(head == null)
        return head;
    Node p1 = head,p2 = head;
    while(p2 != null &amp;&amp; p2.next != null) {
        p1 = p1.next;
        p2 = p2.next.next;
        if(p1 == p2)
            break;
    }
    //不存在环
    if(p1 != p2) 
        return null;
    p2 = head;
    while(p1 != p2) {
        p1 = p1.next;
        p2 = p2.next;
    }
    return p2;
}  
</code></pre>

<h2>7.判断两个链表是否相交  </h2>

<p><strong>题目描述：</strong>给出两个单向链表的头指针（如下图所示），
<img src="http://lanmo.github.com/images/custom_title.jpg" alt="'题目'" />
比如h1、h2，判断这两个链表是否相交。这里为了简化问题，我们假设两个链表均不带环。</p>

<p><strong>分析：</strong>如果两个没有环的链表相交于某一节点,则最后一个节点一定是共有的,我们只要判断两个链表的尾指针是否相等。相等，则链表相交,不相等，则链表不相交。</p>

<p><strong>代码如下：</strong></p>

<pre><code>public boolean isIntersect(Node h1, Node h2) {
    if(h1 == null || h2 == null)
        return false;
    Node p1 = h1;
    while(p1.next != null) {
        p1 = p1.next;
    }
    Node p2 = h2;
    while(p2.next != null) {
        p2 = p2.next;
    }
    //判断尾节点是否相等
    return p1 == p2;
}  
</code></pre>

<h2>８.扩展：链表有环，如何判断相交  </h2>

<p><strong>题目描述：</strong>上面的问题都是针对链表无环的，那么如果现在，链表是有环的呢?上面的方法还同样有效么？</p>

<p><strong>分析：</strong>如果有环且两个链表相交，则两个链表都有共同一个环，即环上的任意一个节点都存在于两个链表上。因此，就可以判断一链表上俩指针相遇的那个节点，在不在另一条链表上 .</p>

<p><strong>代码如下：</strong></p>

<pre><code>public boolean isIntersectWithLoop(Node h1, Node h2) {
    if(h1 == null || h2 == null)
        return false;
    Node p1 = findCircleNode(h1), p2 = findCircleNode(h2);
    //判断链表带不带环，并保存环内节点
    if(p1 == null)
        return false;//不带环，异常退出
    if(p2 == null)
        return false;//不带环，异常退出
    Node n = p2.next;
    //走了一圈
    while(n != p2) {
        if(n == p1)
            return true;
        n = n.next;
    }
    return false;
}  
</code></pre>

<h2>９.扩展：两链表相交的第一个公共节点  </h2>

<p><strong>题目描述：</strong>如果两个无环单链表相交，怎么求出他们相交的第一个节点呢？</p>

<p><strong>分析：</strong>采用对齐的思想。计算两个链表的长度 L1 , L2，分别用两个指针 p1 , p2 指向两个链表的头，然后将较长链表的 p1（假设为 p1）向后移动<code>L2 - L1</code>个节点，然后再同时向后移动p1 , p2，直到 <code>p1 = p2</code>。相遇的点就是相交的第一个节点.</p>

<p><strong>代码如下：</strong></p>

<pre><code>public Node findIntersectNode(Node h1, Node h2) {
    int len1 = listLength(h1);
    int len2 = listLength(h2);
    if(len1 &gt; len2) {
        for(int i=0; i&lt;len1 - len2; ++i) {
            h1 = h1.next;
        }
    } else {
        for(int i=0; i&lt;len2 - len1; ++i) {
            h2 = h2.next;
        }
    }
    while(h1 != null) {
        if(h1 == h2)
            return h1;
        h1 = h1.next;
        h2 = h2.next;
    }
    return null;
}  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git相关]]></title>
    <link href="http://lanmo.github.com/blog/2014/11/03/gitxiang-guan/"/>
    <updated>2014-11-03T20:08:45+08:00</updated>
    <id>http://lanmo.github.com/blog/2014/11/03/gitxiang-guan</id>
    <content type="html"><![CDATA[<p>  　　git版本管理，平时用的比较多，zsh提供了强大的插件，告别了小乌龟时代，都是使用命令进行操作，一般都是常用命令，偶尔也会存在使用不当影响开发，这个地方简单记录一下，出现了问题也可以到这来查查，后续遇到问题在往这里添加吧，写这篇文章的目的也是为了以后少出问题，尽量不出问题，即使出了问题也能很快解决，不要影响开发效率。<br/>
  　　<code>git cherry-pick &lt;commit id&gt;</code><br/>
   　　用于把另一个本地分支的commit修改应用到当前分支。  <br/>
   　　在本地 master 分支上做了一个commit ( 38361a68138140827b31b72f8bbfd88b3705d77a ) ， 如何把它放到 本地 develop 分支上？ <br/>
   　　$git checkout develop<br/>
   　　$git cherry-pick 38361a68138140827b31b72f8bbfd88b3705d77a<br/>
   　　<br/>
   <code>git stash</code><br/>
   1.使用<code>git stash</code>保存当前的工作现场，那么就可以切换到其他分支进行工作，或者在当前分支上完成其他紧急的工作，比如修订一个bug测试提交。<br/>
2.如果一个使用了一个<code>git stash</code>，切换到一个分支，且在该分支上的工作未完成也需要保存它的工作现场。再使用<code>git stash</code>。那么stash 队列中就有了两个工作现场。<br/>
3.可以使用<code>git stash list</code>,查看stash队列。<br/>
4.如果在一个分支上想要恢复某一个工作现场怎么办：先用<code>git stash list</code>查看stash队列。确定要恢复哪个工作现场到当前分支。然后用<code>git stash pop stash@{num}</code>。num 就是你要恢复的工作现场的编号。<br/>
5.如果想要清空stash队列则使用<code>git stash clear</code>。<br/>
6.同时注意使用<code>git stash pop</code>命令是恢复stash队列中的stash@{0}即最上层的那个工作现场。而且使用pop命令恢复的工作现场，其对应的stash 在队列中删除。使用<code>git stash apply stash@{num}</code>方法除了不在stash队列删除外其他和<code>git stash pop</code> 完全一样。  　　</p>

<p>  <strong>Git如何进行分支管理？</strong><br/>
     1、创建分支<br/>
     创建分支很简单：<code>git branch &lt;分支名&gt;</code><br/>
     2、切换分支<br/>
     <code>git checkout &lt;分支名&gt;</code><br/>
     该语句和上一个语句可以和起来用一个语句表示：git checkout -b &lt;分支名><br/>
     3、分支合并<br/>
     比如，如果要将开发中的分支（develop），合并到稳定分支（master），<br/>
     首先切换的master分支：<code>git checkout master</code>。<br/>
     然后执行合并操作：<code>git merge develop</code>。<br/>
     如果有冲突，会提示你，调用<code>git status</code>查看冲突文件。<br/>
     解决冲突，然后调用<code>git add</code>或<code>git rm</code>将解决后的文件暂存。<br/>
     所有冲突解决后，<code>git commit</code> 提交更改。<br/>
     4、分支衍合<br/>
     分支衍合和分支合并的差别在于，分支衍合不会保留合并的日志，不留痕迹，而 分支合并则会保留合并的日志。<br/>
     要将开发中的分支（develop），衍合到稳定分支（master）。<br/>
     首先切换的master分支：<code>git checkout master</code>。<br/>
     然后执行衍和操作：<code>git rebase develop</code>。<br/>
     如果有冲突，会提示你，调用<code>git status</code>查看冲突文件。<br/>
     解决冲突，然后调用<code>git add</code>或<code>git rm</code>将解决后的文件暂存。<br/>
     所有冲突解决后，<code>git rebase --continue</code> 提交更改。<br/>
     5、删除分支<br/>
     执行<code>git branch -d &lt;分支名&gt;</code>
     如果该分支没有合并到主分支会报错，可以用以下命令强制删除<code>git branch -D &lt;分支名&gt; </code><br/>
     6、查看所有分支<br/>
     执行<code>git branch -a</code></p>

<p>   <strong>git常用命令，在这里做个记录，没有什么实际意义</strong><br/>
   1、全局配置<br/>
   <code>git config -global user.name "yangnan"</code><br/>
   <code>git config -global user.email "xjxyyn@126.com"</code><br/>
   2、创建项目<br/>
   <code>mkdir MyProject</code> <br/>
   <code>git init</code>  初始化<br/>
   <code>git add .</code> 添加文件<br/>
   <code>git commit -m "初始化"</code> 提交到本地仓库<br/>
   <code>git remote add origin git@github.com:lanmo/WebSocketDemo.git</code>  添加远程仓库<br/>
   <code>git push origin master</code> 提交到远程仓库</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下常用]]></title>
    <link href="http://lanmo.github.com/blog/2014/10/24/linuxxia-chang-yong/"/>
    <updated>2014-10-24T21:07:26+08:00</updated>
    <id>http://lanmo.github.com/blog/2014/10/24/linuxxia-chang-yong</id>
    <content type="html"><![CDATA[<h4>1、VIM插件、tmux安装及使用请参考地址</h4>

<pre><code>     [wiki地址](https://github.com/lanmo/config/wiki)
</code></pre>

<h4>2、Ack-grep 快速查找字符</h4>

<pre><code>    安装：  
      1、ubuntu下安装`sudo apt-get install ack-grep`  
      2、mac下安装`sudo brew install ack`  
    使用：  
      1、进入vim模式输入 :Ack 搜索字符  
      2、在命令行下面是 ack-grep 搜索字符
</code></pre>

<h5>3、mac、ubuntu、centos安装zsh</h5>

<pre><code>       mac:  brew install zsh
    ubuntu: sudo apt-get install zsh
    centos: sudo yum install zsh
    下载ohmyzsh：
        git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
        cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
        将zsh设置为默认的Shell：
        chsh -s /bin/zsh
        重启终端或者输入source .zshrc即可使用
</code></pre>

<h4>4、ssh相关</h4>

<pre><code>    1、公钥拷贝到某一台主机上`ssh-copy-id user@ip`
    2、sockets代理和隧道转发技术`ssh -f -N -g -D 8898 user@host`
    3、配合上面语句使用保持心跳，`/etc/ssh/ssh_config`，这个文件加这两行:
        TCPKeepAlive yes  
        ServerAliveInterval 60
</code></pre>

<h4>5、AWK使用，这个命令平时很少使用，想到什么就写什么吧</h4>

<pre><code>    1、获取进程PID: 
        bash: `ps -ef | grep [n]ginx | awk -F " " '{print $2}'`
         zsh: `ps -ef | grep '[n]ginx' | awk -F " " '{print $2}'`
</code></pre>

<h4>6、sudo使用技巧</h4>

<pre><code>    1、sudo !!
    用法：想要作为root授权来运行一个命令，但是忘记使用“sudo”了?不要担心。我们可以使用”sudo !!”结合命令历史来执行你想要执行的命令。参数”!!“和”!-1“作用一样，都是允许用户作为root来执行我们刚才输入的命令，当然，以此类推，我们可以使用下面命令来执行倒数第二个命令：
    `sudo !-2`
    2、sudo -i
      我们使用上述命令，可以切换到root状态下。
      我们可以用下面命令格式，用一个指定的用户登陆shell：
      `sudo -u username -i`
    3、sudo 输出重定向
      当我们使用sudo 进行输出重定向的时候，命令的第二部分无法获得授权
      `sudo command &gt; outputfile`
      解决方法：
        使用’sudo tee’代替”&gt;”;
        使用”sudo tee -a”代替”&gt;&gt;”;
        `sudo command | sudo tee outputfile`
    4、:w !sudo tee %
        上述命令可用在vi/vim编辑器中。编辑文件后保存时不用担心没有修改的权限了
</code></pre>
]]></content>
  </entry>
  
</feed>
